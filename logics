// LOGICS

1 : If We ar Sorting, or Finding Max or Min again n again 
    to optimised This Situation Use : PriorityQueue/Heap
  
2 : If We are working with Subarrays
    we shall prefer : Sliding Window  or Prefix Sum

3 : If we are dealing with Subsequence
    we shall prefer : Backtraking solution then try to convert it into Head Recursion solution
    than try to Optimised it by Using Dynamic Programming

4 : In most of the String Problems we would prefer Stack Solution

5 : Always try to write a BruteForce solution than try to focus the Inner Loops
    and Brainstorm how this inner loop can be replaced with optimised code
    Example : If we add a Inner loop to Search than replace that with HashMap
              as it Reduces time complexity From O(n) -> O(1)

6 : If N is the size of an Array
    If we generate all the subarrays of an Array
    and count the frequency of each number of Array in all the Subarrays
    then,
            if N == EVEN : All the numbers of an Array have frequency EVEN
            if N == ODD : EVEN index elements have ODD Frequency and ODD index elements have EVEN Frequency

7 : If we have an array containing pair of Integers at each Index 
    or provide the range as starting and ending point 
    to deal with that type of question focus on the impacting point of that range that change the previous scenerio
